Was gibts am Markt?

  Chef      * Opscope
            * auch Windowsserver
            * DSL mächtig, weil Ruby, aber lowlevel,


  Puppet    * Puppet Labs
            * unixbasierte Server, kein Windows
            * viele (>1200) fertige Konfigurationen, aber schlecht gepflegt
            * eigene auf Ruby basierende DSL, teilweise unflexibel

  beide     * schwer zu installieren, weil komplex
            * nur neue unixbasierte Systeme

----
Warum Gradle? ... oder was bekomme ich out of the box?
   * dependencies (TODO) 
   * deklaratives Modell "füttert" Tasks
   * build-includes 
   * Aufruf einzelner Aktionen / aller Aktionen für einen Buildknoten
   * Flexibilität doLast / doFirst  (TODO?)
   * volle Ant/Java/Groovy Unterstützung
   * Auflösen von Variablen
   * Module durch GradlePlugins abgebildet (JCenter.... Deployment TODO)
   * dry mode
   * parallele Builds (Incubating)
   * MultiProject Builds (TODO?)
   * Einfache Unittests
   * Komplette Buildumgebung
   * Gradle kann super mit Files umgehen

Pike - Basics:

    Man kann auf
        * unterschiedliche Hosts
        * mit unterschiedlichen Betriebssystemen
        * unterschiedliche Environments installieren

    Ein Environment kann aus 1:n Arbeitschritten bestehen (Worker)
    Es kann ein oder alle Environments installiert werden


Zusätzliche Features:

       * Operatingsystems können voneinander erben (z.B. lin32 und lin64 von lin)
       * Autoinstallation braucht nur einen ssh/sftp Zugang
       * Daten werden gecached
       * Unterschiedliche Hosts
       * Mit unterschiedlichen Hostgruppen können inhaltlich zusammengehörende Hosts zusammen konfiguriert werden
       * Matrixjobs
       * Benutzung von modellbezogenen Variablen oder BuiltInVariablen (wie z.B. User)

Technisches:
       * Pro konfiguriertem Environment wird jeweils ein install, deinstall und check task erzeugt
       * Für jedes konfigurirte OS wird automatisch ein OSProvider nach bestimmten Namensschema gesucht
       * Für jedes konfigurierte Env wird automatisch ein DelegatingTask angelegt, der 1:n Worker assoziiert bekommt
       * Unittesting möglich









