buildscript {
  repositories {
     mavenLocal()
     jcenter()
  }
  dependencies {
     classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5"
  }
}

import java.text.SimpleDateFormat

def globalVersion = new Version("0.1")

subprojects {


    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'com.jfrog.bintray'

    dependencies {
        compile localGroovy()
        compile gradleApi()
    }

    // Tests in package integration are only called in task integrationtest
    test {
        exclude "**/integration/**"
    }

    task integrationtest(type: Test) {
        include "**/integration/**"
        jvmArgs "-XX:MaxPermSize=128m"
    }

    repositories {
        mavenCentral()
        maven {
            url "http://mvnrepository.com/artifact/"
        }
        jcenter()
    }

    group = 'org.pike'
    version = globalVersion
    status = version.status

    println ("Configuring for $project.name")

    ext.publish = true
    bintray {
//        apiUrl = "https://api.bintray.net"
        user = System.properties['bintray.username']
        key = System.properties['bintray.password']
        configurations = ['published', 'archives']
        /**publications = ['published']
        filesSpec {
          from 'files'
          into 'standalone_files/level1'
          rename '(.+)\\.(.+)', '$1-suffix.$2'
        }  **/
        dryRun=false
        publish = true
        pkg {
            repo = 'pike'
            name = "${project.name}"
            //userOrg = ''
            desc = 'what a fantastic package indeed!'
            websiteUrl = 'https://github.com/moley/pike'
            issueTrackerUrl = 'https://github.com/moley/pike/issues'
            vcsUrl = 'https://github.com/moley/pike.git'
            licenses = ['Apache-2.0']
            labels = ['pike', 'devop', 'gorilla']
            attributes= ['plat': ['linux', 'osx']]
            publicDownloadNumbers = true
            version.attributes = [ 'gradle-plugin': "org.pike.${project.name}:org.pike:${project.name}" ]
        }
    }
    
}


subprojects {
    apply plugin: 'maven'

    if (project.plugins.hasPlugin('java')) {
        configurations {
            published
        }
        dependencies {
            testCompile 'junit:junit:4.7'
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }


        // Add the sourceJars to non-extractor modules
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}

configurations {
    published
}




task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
